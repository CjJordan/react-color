export * from './utils';

/**
 * ```js
 * rgbaToHsva({ r: 255, g: 255, b: 255, a: 1 }) //=> { h: 0, s: 0, v: 100, a: 1 }
 * ```
 */
export var rgbaToHsva = function rgbaToHsva(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  var max = Math.max(r, g, b);
  var delta = max - Math.min(r, g, b); // prettier-ignore

  var hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;
  return {
    h: round(60 * (hh < 0 ? hh + 6 : hh)),
    s: round(max ? delta / max * 100 : 0),
    v: round(max / 255 * 100),
    a: a
  };
};
export var hsvaToHslString = function hsvaToHslString(hsva) {
  var _hsvaToHsla = hsvaToHsla(hsva),
      h = _hsvaToHsla.h,
      s = _hsvaToHsla.s,
      l = _hsvaToHsla.l;

  return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
};
export var hsvaToHsvString = function hsvaToHsvString(hsva) {
  var _roundHsva = roundHsva(hsva),
      h = _roundHsva.h,
      s = _roundHsva.s,
      v = _roundHsva.v;

  return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
};
export var hsvaToHsvaString = function hsvaToHsvaString(hsva) {
  var _roundHsva2 = roundHsva(hsva),
      h = _roundHsva2.h,
      s = _roundHsva2.s,
      v = _roundHsva2.v,
      a = _roundHsva2.a;

  return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
};
export var hsvaToHslaString = function hsvaToHslaString(hsva) {
  var _hsvaToHsla2 = hsvaToHsla(hsva),
      h = _hsvaToHsla2.h,
      s = _hsvaToHsla2.s,
      l = _hsvaToHsla2.l,
      a = _hsvaToHsla2.a;

  return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
};
export var hslaStringToHsva = function hslaStringToHsva(hslString) {
  var matcher = /hsla?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(hslString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return hslaToHsva({
    h: parseHue(match[1], match[2]),
    s: Number(match[3]),
    l: Number(match[4]),
    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)
  });
};
export var hslStringToHsva = hslaStringToHsva;
export var hslaToHsva = function hslaToHsva(_ref2) {
  var h = _ref2.h,
      s = _ref2.s,
      l = _ref2.l,
      a = _ref2.a;
  s *= (l < 50 ? l : 100 - l) / 100;
  return {
    h: h,
    s: s > 0 ? 2 * s / (l + s) * 100 : 0,
    v: l + s,
    a: a
  };
};
export var hsvaToHsla = function hsvaToHsla(_ref3) {
  var h = _ref3.h,
      s = _ref3.s,
      v = _ref3.v,
      a = _ref3.a;
  var hh = (200 - s) * v / 100;
  return {
    h: round(h),
    s: round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),
    l: round(hh / 2),
    a: round(a, 2)
  };
};
export var hsvaStringToHsva = function hsvaStringToHsva(hsvString) {
  var matcher = /hsva?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(hsvString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return roundHsva({
    h: parseHue(match[1], match[2]),
    s: Number(match[3]),
    v: Number(match[4]),
    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)
  });
};
/**
 * Valid CSS <angle> units.
 * https://developer.mozilla.org/en-US/docs/Web/CSS/angle
 */

var angleUnits = {
  grad: 360 / 400,
  turn: 360,
  rad: 360 / (Math.PI * 2)
};
export var parseHue = function parseHue(value) {
  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'deg';
  return Number(value) * (angleUnits[unit] || 1);
};
export var hsvStringToHsva = hsvaStringToHsva;
export var rgbaStringToHsva = function rgbaStringToHsva(rgbaString) {
  var matcher = /rgba?\(?\s*(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
  var match = matcher.exec(rgbaString);
  if (!match) return {
    h: 0,
    s: 0,
    v: 0,
    a: 1
  };
  return rgbaToHsva({
    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),
    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),
    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),
    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1)
  });
};
export var rgbStringToHsva = rgbaStringToHsva;

var format = function format(number) {
  var hex = number.toString(16);
  return hex.length < 2 ? '0' + hex : hex;
};

export var rgbaToHex = function rgbaToHex(_ref4) {
  var r = _ref4.r,
      g = _ref4.g,
      b = _ref4.b;
  return '#' + format(r) + format(g) + format(b);
};
export var hexToHsva = function hexToHsva(hex) {
  return rgbaToHsva(hexToRgba(hex));
};
export var hexToRgba = function hexToRgba(hex) {
  if (hex[0] === '#') hex = hex.substr(1);

  if (hex.length < 6) {
    return {
      r: parseInt(hex[0] + hex[0], 16),
      g: parseInt(hex[1] + hex[1], 16),
      b: parseInt(hex[2] + hex[2], 16),
      a: 1
    };
  }

  return {
    r: parseInt(hex.substr(0, 2), 16),
    g: parseInt(hex.substr(2, 2), 16),
    b: parseInt(hex.substr(4, 2), 16),
    a: 1
  };
};
export var round = function round(number) {
  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.pow(10, digits);
  return Math.round(base * number) / base;
};
export var roundHsva = function roundHsva(hsva) {
  return {
    h: round(hsva.h),
    s: round(hsva.s),
    v: round(hsva.v),
    a: round(hsva.a, 2)
  };
};
export var hsvaToRgba = function hsvaToRgba(_ref5) {
  var h = _ref5.h,
      s = _ref5.s,
      v = _ref5.v,
      a = _ref5.a;
  h = h / 360 * 6;
  s = s / 100;
  v = v / 100;
  var hh = Math.floor(h),
      b = v * (1 - s),
      c = v * (1 - (h - hh) * s),
      d = v * (1 - (1 - h + hh) * s),
      module = hh % 6;
  return {
    r: round([v, c, b, b, d, v][module] * 255),
    g: round([d, v, v, c, b, b][module] * 255),
    b: round([b, b, d, v, v, c][module] * 255),
    a: round(a, 2)
  };
};
export var hsvaToRgbString = function hsvaToRgbString(hsva) {
  var _hsvaToRgba = hsvaToRgba(hsva),
      r = _hsvaToRgba.r,
      g = _hsvaToRgba.g,
      b = _hsvaToRgba.b;

  return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
};
export var hsvaToRgbaString = function hsvaToRgbaString(hsva) {
  var _hsvaToRgba2 = hsvaToRgba(hsva),
      r = _hsvaToRgba2.r,
      g = _hsvaToRgba2.g,
      b = _hsvaToRgba2.b,
      a = _hsvaToRgba2.a;

  return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
};
export var rgbaToRgb = function rgbaToRgb(_ref6) {
  var r = _ref6.r,
      g = _ref6.g,
      b = _ref6.b;
  return {
    r: r,
    g: g,
    b: b
  };
};
export var hslaToHsl = function hslaToHsl(_ref7) {
  var h = _ref7.h,
      s = _ref7.s,
      l = _ref7.l;
  return {
    h: h,
    s: s,
    l: l
  };
};
export var hsvaToHex = function hsvaToHex(hsva) {
  return rgbaToHex(hsvaToRgba(hsva));
};
export var hsvaToHsv = function hsvaToHsv(hsva) {
  var _roundHsva3 = roundHsva(hsva),
      h = _roundHsva3.h,
      s = _roundHsva3.s,
      v = _roundHsva3.v;

  return {
    h: h,
    s: s,
    v: v
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,